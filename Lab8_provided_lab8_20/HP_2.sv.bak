module HP (
	input Clk,
			Reset,
			frame_clk,
	input logic [7:0] keycode,
	input logic [8:0] hp_hit,
	input logic [9:0] DrawX, DrawY,
	output logic [31:0] HP_SRAM_ADDR,
	output logic is_HP,
	output logic is_f,
	output  logic[9:0]  HP_X_Pos, HP_Y_Pos
	
	
	);
	// screen size 640 480
	parameter [9:0] HP_X_Start = 10'd480;  // Center position on the X axis
   parameter [9:0] HP_Y_Start = 10'd300;
	parameter [9:0] HP_SIZE_X = 10'd100;
	parameter [9:0] HP_SIZE_Y = 10'd125;
	parameter [9:0] X_Step=10'd2;
	parameter [9:0] Y_Step=10'd2;
	parameter [9:0] X_MIN=10'd0;
	parameter [9:0] X_MAX=10'd639;
	parameter [9:0] Y_MIN=10'd0;
	parameter [9:0] Y_MAX=10'd479;
	parameter [9:0] jump_high=10'd20;
		
	//--------------------load memory-----------------//
	logic [9:0] HP_X_Motion,HP_Y_Motion;
	
   logic [9:0] HP_X_Pos_in,  HP_Y_Pos_in,HP_X_Motion_in,HP_Y_Motion_in;
	
	
	
	
	
	//logic is_f_in;
	logic face_d,face_d_in,is_f_in;
	
	logic [3:0] counterL,counterL_in;
	logic [3:0] counterR,counterR_in;
	logic [3:0] counterU,counterU_in;
	logic [3:0] counterD,counterD_in;
	
	logic [2:0] counterF,counterF_in;
	
	logic [3:0] choose,choose_in;
	
	logic [31:0] offset,offset_in;
	
	logic frame_clk_delayed, frame_clk_rising_edge;
    always_ff @ (posedge Clk) begin
        frame_clk_delayed <= frame_clk;
        frame_clk_rising_edge <= (frame_clk == 1'b1) && (frame_clk_delayed == 1'b0);
    end
  
always_ff @ (posedge Clk)
  begin
      if (Reset)
      begin
          HP_X_Pos <= HP_X_Start;
          HP_Y_Pos <= HP_Y_Start;
			 HP_X_Motion <= 10'd0;
          HP_Y_Motion <= 10'd0;
			 
			choose<=3'b000;
				
			counterL<=4'b0;
			counterR<=4'b0;
			counterD<=4'b0;
			counterU<=4'b0;
			
			counterF<=4'b0;
		
			face_d<=1'b1;
			is_f<=1'b0;
      end
      else
      begin
         HP_X_Pos <= HP_X_Pos_in;
         HP_Y_Pos <= HP_Y_Pos_in;
			HP_X_Motion <= HP_X_Motion_in;
         HP_Y_Motion <= HP_Y_Motion_in;
			
			choose<=choose_in;
			counterL<=counterL_in;
			counterR<=counterR_in;
			counterD<=counterD_in;
			counterU<=counterU_in;
			counterF<=counterF_in;
			
			face_d<=face_d_in;
			is_f<=is_f_in;
      end
  end
  
	always_comb
  begin
      // By default, keep motion and position unchanged
      HP_X_Pos_in = HP_X_Pos;
      HP_Y_Pos_in = HP_Y_Pos;
      HP_X_Motion_in = HP_X_Motion;
      HP_Y_Motion_in = HP_Y_Motion;
		
		choose_in=choose;
		counterL_in=counterL;
		counterF_in=counterF;
		counterR_in=counterR;
		counterD_in=counterD;
		counterU_in=counterU;
		face_d_in=face_d;
		is_f_in=is_f;
		
      if (frame_clk_rising_edge)
      begin
				case(keycode)
					8'h04: //A left
							begin
									counterL_in=counterL+4'd1;
									face_d_in=1'b1; 
							if (counterL_in<4'd8)
									choose_in=3'b010;
							else
									choose_in=3'b001;
									
							if ( HP_X_Pos <= X_MIN + HP_SIZE_X ) // Ball is at the top edge, BOUNCE!
							begin
									HP_X_Motion_in = 10'd0;
									HP_Y_Motion_in = 10'd0;
							end
							else
							begin	
									HP_Y_Motion_in =10'd0;
									HP_X_Motion_in = ((~X_Step) + 1'b1);
							end
							end
					8'd07: //D right
							begin 
									counterR_in=counterR+4'd1;
									face_d_in=1'b0;  //right 0
							if (counterR_in<4'd8)
									choose_in=3'b010;
							else
									choose_in=3'b001;
							if( HP_X_Pos + HP_SIZE_X >= X_MAX ) // Ball is at the bottom edge, BOUNCE!
							begin
								HP_X_Motion_in = 10'd0;  // 2's complement.  
								HP_Y_Motion_in = 10'd0;
							end
							else begin
									HP_Y_Motion_in =10'd0;
									HP_X_Motion_in = X_Step;
								end
							end
							
					8'd23: //S down
							begin 
								
									choose_in=3'b101;
							
							end
					8'd26: //W jump
							begin 
								counterU_in=counterU+4'd1;	
							if (counterU_in<4'd8)begin
									choose_in=4'b110;
									HP_Y_Motion_in =(~jump_high)+10'b1;
									end
							else	begin
									choose_in=3'b000;
									HP_Y_Motion_in = jump_high;
									end
							end
				

	
					8'd09: begin //fist
							
							counterF_in=counterF+3'd1;
							HP_X_Motion_in = 10'd0;    
							HP_Y_Motion_in = 10'd0;
							if (counterF_in<3'd4) begin
								choose_in=3'b100;
								is_f_in=1'd1;
								end
							else
							begin
								is_f_in=1'd0;
								choose_in=3'b011;
							end
							end
					default:begin
							HP_X_Motion_in =10'd0;
							HP_Y_Motion_in =10'd0;
							choose_in=3'b000;
							if (HP_Y_Pos>10'd300)
								HP_Y_Motion_in=~(10'd300-HP_Y_Pos)+10'd1;
							end
				endcase
				
          // Update the ball's position with its motion
          HP_X_Pos_in = HP_X_Pos+HP_X_Motion_in ;
          HP_Y_Pos_in = HP_Y_Pos+HP_Y_Motion_in ;
			end	
		
		end

	always_comb begin

	if  (hp_hit!=0)
			offset=32'hA0730;
			
		else
		begin
		case(choose)
	
		3'b000:offset=32'h4B000;//stand
		3'b001:offset= 32'h57350;//walk left
		3'b010:offset=32'h636A0;
		3'b011:offset= 32'h6F9F0;//fist
		3'b100:offset= 32'h7BD40;
		3'b101:offset= 32'h88090;
		3'b110:offset= 32'h943E0;
		
		default: offset=32'h4B000;
		endcase
		end
	end
		
	always_comb begin
		is_HP = 1'b0;
		HP_SRAM_ADDR=32'h0;
		if (DrawX<=(HP_X_Pos+10'd99)&& DrawX>=(HP_X_Pos-10'd100)&& DrawY<=(HP_Y_Pos+10'd124)&& DrawY>=(HP_Y_Pos-10'd125))begin
					if (face_d==1'b1)
							HP_SRAM_ADDR= DrawX-HP_X_Pos+19'd100 + (DrawY-HP_Y_Pos+125)*19'd200 +offset;//+offset;
					else
							HP_SRAM_ADDR=-DrawX+HP_X_Pos+19'd100 + (DrawY-HP_Y_Pos+125)*19'd200+offset;
					is_HP = 1'b1;
				end
	end
	
endmodule

